BlogPost.create!([
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/134451531856", title: "Adventures Optimizing the Python Memoizing Pattern", summary: "<p><article class=\"markdown-body entry-content\" itemprop=\"mainContentOfPage\"><p>I&rsquo;ll admit it. I hate meta programming. Don&rsquo;t get me wrong, I like to use it, but only after somebody else has slaved away create all that darkroom magic that makes my life so seamless. Even so, every once in a while I too get caught deep in the metaprogramming rabbit hole. Usually after I&rsquo;ve grown sick of typing the same boiler plate patterns over and over again. Most of the time there&rsquo;s nothing to brag about. Every once in a while I feel like I&rsquo;ve at least struck silver. So here goes. I&rsquo;m presenting what may be the fastest way to memoize property decorators in Python. Necessity is the mother of invention, and I stumbled across this problem after writing and rewriting this same pattern.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>:\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">full_name</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">try</span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-v\">self</span>.__full_name\n        <span class=\"pl-k\">except</span> <span class=\"pl-c1\">AttributeError</span>:\n            val <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">%s</span>_<span class=\"pl-c1\">%s</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (<span class=\"pl-v\">self</span>.first_name, <span class=\"pl-v\">self</span>.last_name)\n            <span class=\"pl-v\">self</span>.__full_name <span class=\"pl-k\">=</span> val\n            <span class=\"pl-k\">return</span> val</pre></div>\n\n<p>This is a lot of boilerplate code. It would be nice to be able to repeat the pattern like this:</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>:\n    <span class=\"pl-en\">@cached_property</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">full_name</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">%s</span>_<span class=\"pl-c1\">%s</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (<span class=\"pl-v\">self</span>.first_name, <span class=\"pl-v\">self</span>.last_name)</pre></div>\n\n<p>I looked up some memoizing patterns, and this patten seems to be the standard way to do things.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">cache_property_standard</span>(<span class=\"pl-smi\">fget</span>):\n    private_template <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>_<span class=\"pl-c1\">%%</span>s__<span class=\"pl-c1\">%s</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> fget.<span class=\"pl-c1\">__name__</span>\n    <span class=\"pl-k\">from</span> functools <span class=\"pl-k\">import</span> wraps\n    <span class=\"pl-en\">@wraps</span>(fget)\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">fget_memoized</span>(<span class=\"pl-smi\">self</span>):\n        attr_name <span class=\"pl-k\">=</span> private_template <span class=\"pl-k\">%</span> <span class=\"pl-v\">self</span>.<span class=\"pl-c1\">__class__</span>.<span class=\"pl-c1\">__name__</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-k\">not</span> <span class=\"pl-c1\">hasattr</span>(<span class=\"pl-v\">self</span>, attr_name):\n            <span class=\"pl-c1\">setattr</span>(<span class=\"pl-v\">self</span>, attr_name, fget(<span class=\"pl-v\">self</span>))\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">getattr</span>(<span class=\"pl-v\">self</span>, attr_name)\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">property</span>(fget_memoized)</pre></div>\n\n<p>This seems to be the most common pattern, but it&rsquo;s really slow. This is where I&rsquo;m offering my alternative implementation.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-en\">Person</span>(<span class=\"pl-e\">namedtuple</span>(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>BasePerson<span class=\"pl-pds\">'</span></span>, (<span class=\"pl-s\"><span class=\"pl-pds\">'</span>first_name<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>last_name<span class=\"pl-pds\">'</span></span>))):\n    <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__repr__</span>(<span class=\"pl-smi\">self</span>):\n        c <span class=\"pl-k\">=</span> <span class=\"pl-v\">self</span>.<span class=\"pl-c1\">__class__</span>.<span class=\"pl-c1\">__name__</span>\n        items <span class=\"pl-k\">=</span> [<span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">%s</span>: <span class=\"pl-c1\">%r</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> i <span class=\"pl-k\">for</span> i <span class=\"pl-k\">in</span> <span class=\"pl-c1\">zip</span>(<span class=\"pl-v\">self</span>._fields, <span class=\"pl-v\">self</span>)]\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span><span class=\"pl-c1\">%s</span>(<span class=\"pl-c1\">%s</span>)<span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> (c, <span class=\"pl-s\"><span class=\"pl-pds\">'</span>, <span class=\"pl-pds\">'</span></span>.join(items))\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SlowPerson</span>(<span class=\"pl-e\">Person</span>):\n    <span class=\"pl-en\">@cache_property_standard</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">full_name</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>.join([<span class=\"pl-v\">self</span>.first_name, <span class=\"pl-v\">self</span>.last_name])\n\ns <span class=\"pl-k\">=</span> SlowPerson(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Zelaznik<span class=\"pl-pds\">'</span></span>)\n\nIn [<span class=\"pl-c1\">94</span>]: s.full_name\nOut[<span class=\"pl-c1\">94</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve Zelaznik<span class=\"pl-pds\">'</span></span>\n\nIn [<span class=\"pl-c1\">95</span>]: timeit s.full_name\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">805</span> ns per loop\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">790</span> ns per loop\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">781</span> ns per loop\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">789</span> ns per loop</pre></div>\n\n<p>We can do a lot better. This is the solution I&rsquo;ve proposed for the same problem. Notice the order of magnitude difference in speed. It&rsquo;s also more efficient with memory as well. It requires one new dictionary for each field that is memoized, as opposed to a new dictionary for each object that&rsquo;s instantiated.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">lightning_speed_cache</span>(<span class=\"pl-smi\">func</span>):\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">Cache</span>(<span class=\"pl-c1\">dict</span>):\n        <span class=\"pl-c1\">__slots__</span> <span class=\"pl-k\">=</span> ()\n        <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__missing__</span>(<span class=\"pl-smi\">self</span>, <span class=\"pl-smi\">key</span>):\n            val <span class=\"pl-k\">=</span> func(key)\n            <span class=\"pl-v\">self</span>[key] <span class=\"pl-k\">=</span> val\n            <span class=\"pl-k\">return</span> val\n    fget <span class=\"pl-k\">=</span> Cache().<span class=\"pl-c1\">__getitem__</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">property</span>(fget, <span class=\"pl-v\">doc</span><span class=\"pl-k\">=</span>func.<span class=\"pl-c1\">__doc__</span>)\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Sprinter</span>(<span class=\"pl-e\">Person</span>):\n    <span class=\"pl-c1\">__slots__</span> <span class=\"pl-k\">=</span> ()\n    <span class=\"pl-en\">@lightning_speed_cache</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">full_name</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>.join([<span class=\"pl-v\">self</span>.first_name, <span class=\"pl-v\">self</span>.last_name])\nt <span class=\"pl-k\">=</span> Sprinter(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Zelaznik<span class=\"pl-pds\">'</span></span>)\n\nt.full_name\nOut[<span class=\"pl-c1\">131</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve Zelaznik<span class=\"pl-pds\">'</span></span>\n\ntimeit t.full_name\n<span class=\"pl-c1\">10000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">150</span> ns per loop\n<span class=\"pl-c1\">10000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">152</span> ns per loop\n<span class=\"pl-c1\">10000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">150</span> ns per loop\n<span class=\"pl-c1\">10000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">150</span> ns per loop</pre></div>\n\n<p>This solution is as good as we&rsquo;re going to get for anything that&rsquo;s wrapped with a &ldquo;property&rdquo; decorator. <strong>These are the same benchmarks that Python&rsquo;s namedtuple attributes achieve.</strong> It doesn&rsquo;t The first thing we can do is start to use exceptions. Python is a &ldquo;Better to ask forgiveness than permission,&rdquo; language. This contrasts with lower level languages which follow a &ldquo;Look before you leap,&rdquo; approach. Here&rsquo;s our first improvement. Baby steps, baby steps&hellip;</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">cache_property_use_exceptions</span>(<span class=\"pl-smi\">fget</span>):\n    private_template <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>_<span class=\"pl-c1\">%%</span>s__<span class=\"pl-c1\">%s</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> fget.<span class=\"pl-c1\">__name__</span>\n    <span class=\"pl-k\">from</span> functools <span class=\"pl-k\">import</span> wraps\n    <span class=\"pl-en\">@wraps</span>(fget)\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">fget_memoized</span>(<span class=\"pl-smi\">self</span>):\n        attr_name <span class=\"pl-k\">=</span> private_template <span class=\"pl-k\">%</span> <span class=\"pl-v\">self</span>.<span class=\"pl-c1\">__class__</span>.<span class=\"pl-c1\">__name__</span>\n        <span class=\"pl-k\">try</span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">getattr</span>(<span class=\"pl-v\">self</span>, attr_name)\n        <span class=\"pl-k\">except</span> <span class=\"pl-c1\">AttributeError</span>:\n            val <span class=\"pl-k\">=</span> fget(<span class=\"pl-v\">self</span>)\n            <span class=\"pl-c1\">setattr</span>(<span class=\"pl-v\">self</span>, attr_name, val)\n            <span class=\"pl-k\">return</span> val\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">property</span>(fget_memoized)\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">MediumPerson</span>(<span class=\"pl-e\">Person</span>):\n    <span class=\"pl-en\">@cache_property_use_exceptions</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">full_name</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>.join([<span class=\"pl-v\">self</span>.first_name, <span class=\"pl-v\">self</span>.last_name])\n\nm <span class=\"pl-k\">=</span> MediumPerson(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Zelaznik<span class=\"pl-pds\">'</span></span>)\nm.full_name\nOut[<span class=\"pl-c1\">116</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve Zelaznik<span class=\"pl-pds\">'</span></span>\ntimeit m.full_name\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">678</span> ns per loop</pre></div>\n\n<p>The big bottleneck is when we&rsquo;re setting attributes by their private name. For those of you who don&rsquo;t already know, <strong>Python stores &ldquo;private&rdquo; attributes in an obscure way. They&rsquo;re not really private, they&rsquo;ve just garbled up the naming convention.</strong> Not that different from trying to watch HBO as a kid without a subscription. You would still make out what&rsquo;s going on if you&rsquo;re willing to put in the effort. So &ldquo;full_name&rdquo; is officially a private attribute. That means the dictionary that stores the instance attributes for a person looks like this:</p>\n\n<div class=\"highlight highlight-source-python\"><pre>m2 <span class=\"pl-k\">=</span> MediumPerson(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Zelaznik<span class=\"pl-pds\">'</span></span>)\nm2.full_name\nOut[<span class=\"pl-c1\">121</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve Zelaznik<span class=\"pl-pds\">'</span></span>\nm2.<span class=\"pl-c1\">__dict__</span>\nOut[<span class=\"pl-c1\">122</span>]: {<span class=\"pl-s\"><span class=\"pl-pds\">'</span>_MediumPerson__full_name<span class=\"pl-pds\">'</span></span>: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve Zelaznik<span class=\"pl-pds\">'</span></span>}</pre></div>\n\n<p>Getting rid of this will shave a lot of time off. Let&rsquo;s take a look. Just to show that my computer didn&rsquo;t suddenly speed up as I have been writing this post, I went back and benchmarked an earlier class instance:</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">cache_property_semipublic_names</span>(<span class=\"pl-smi\">fget</span>):\n    attr_name <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>_<span class=\"pl-c1\">%s</span><span class=\"pl-pds\">'</span></span> <span class=\"pl-k\">%</span> fget.<span class=\"pl-c1\">__name__</span>\n    <span class=\"pl-k\">from</span> functools <span class=\"pl-k\">import</span> wraps\n    <span class=\"pl-en\">@wraps</span>(fget)\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">fget_memoized</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">try</span>:\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">getattr</span>(<span class=\"pl-v\">self</span>, attr_name)\n        <span class=\"pl-k\">except</span> <span class=\"pl-c1\">AttributeError</span>:\n            val <span class=\"pl-k\">=</span> fget(<span class=\"pl-v\">self</span>)\n            <span class=\"pl-c1\">setattr</span>(<span class=\"pl-v\">self</span>, attr_name, val)\n            <span class=\"pl-k\">return</span> val\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">property</span>(fget_memoized)\n\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">SemiPublicAttributes</span>(<span class=\"pl-e\">Person</span>):\n    <span class=\"pl-en\">@cache_property_semipublic_names</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">full_name</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>.join([<span class=\"pl-v\">self</span>.first_name, <span class=\"pl-v\">self</span>.last_name])\n\ni <span class=\"pl-k\">=</span> SemiPublicAttributes(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Zelaznik<span class=\"pl-pds\">'</span></span>)\ni.full_name\nOut[<span class=\"pl-c1\">127</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve Zelaznik<span class=\"pl-pds\">'</span></span>\n\ntimeit i.full_name\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">321</span> ns per loop\n<span class=\"pl-c\"># Whoa!  Did my computer speed up suddenly?</span>\n<span class=\"pl-c\"># Let's run the old class instance just to be sure...</span>\ntimeit m.full_name\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">695</span> ns per loop</pre></div>\n\n<p>We&rsquo;re almost there, but we can STILL shave off more than half the runtime we&rsquo;re currently occupying. We&rsquo;ve got two more steps to go. First, let&rsquo;s get rid of the attribute getting. It&rsquo;s far more efficient simply to store the caches inside a closure. This is also more memory efficient. We need one dictionary per field memoized, as opposed one dictionary per item. Hash tables waste space, so a field based storage system makes more sense in this case. In addition, it allows us to add attributes to classes where <strong>__slots__ = ()</strong>. The namedtuple in particular comes to mind.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">caches_stored_per_field_not_instance</span>(<span class=\"pl-smi\">func</span>):\n    <span class=\"pl-k\">from</span> functools <span class=\"pl-k\">import</span> wraps\n    cache <span class=\"pl-k\">=</span> {}\n    <span class=\"pl-en\">@</span><span class=\"pl-c1\">property</span>\n    <span class=\"pl-en\">@wraps</span>(func)\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">decorated</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">try</span>:\n            <span class=\"pl-k\">return</span> cache[<span class=\"pl-v\">self</span>]\n        <span class=\"pl-k\">except</span> <span class=\"pl-c1\">KeyError</span>:\n            value <span class=\"pl-k\">=</span> func(<span class=\"pl-v\">self</span>)\n            cache[<span class=\"pl-v\">self</span>] <span class=\"pl-k\">=</span> value\n            <span class=\"pl-k\">return</span> value\n    <span class=\"pl-k\">return</span> decorated\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Jogger</span>(<span class=\"pl-e\">Person</span>):\n    <span class=\"pl-en\">@caches_stored_per_field_not_instance</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">full_name</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>.join([<span class=\"pl-v\">self</span>.first_name, <span class=\"pl-v\">self</span>.last_name])\n\nj <span class=\"pl-k\">=</span> Jogger(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Zelaznik<span class=\"pl-pds\">'</span></span>)\n\nj.full_name\nOut[<span class=\"pl-c1\">152</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve Zelaznik<span class=\"pl-pds\">'</span></span>\n\ntimeit j.full_name\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">263</span> ns per loop\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">266</span> ns per loop\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">262</span> ns per loop\n<span class=\"pl-c1\">1000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">266</span> ns per loop</pre></div>\n\n<p>One step left before we&rsquo;re done. This is probably the most &ldquo;Python magic&rdquo; of any of the steps so far. <strong>Function calls in Python are expensive. So whenever we are writing programming, it&rsquo;s nice to be able to delegate those calls to builtin methods, which are written in C.</strong> What we&rsquo;re doing here is making a special subclass of a dictionary. When the item is missing, that&rsquo;s when we go ahead and make the original function call. Again, Python is &ldquo;ask forgiveness and not permission.&rdquo; Then we instantiate this dictionary subclass. This subclass is a singleton. The clever thing that we do is we return the <strong>__getitem__</strong> method of the singleton. A property getter object only expects one argument &ldquo;self&rdquo;, and the <strong>__getitem__</strong> method only expects one key, so this works out perfectly.</p>\n\n<div class=\"highlight highlight-source-python\"><pre><span class=\"pl-k\">def</span> <span class=\"pl-en\">lightning_speed_cache</span>(<span class=\"pl-smi\">func</span>):\n    <span class=\"pl-k\">class</span> <span class=\"pl-en\">Cache</span>(<span class=\"pl-c1\">dict</span>):\n        <span class=\"pl-c1\">__slots__</span> <span class=\"pl-k\">=</span> ()\n        <span class=\"pl-k\">def</span> <span class=\"pl-c1\">__missing__</span>(<span class=\"pl-smi\">self</span>, <span class=\"pl-smi\">key</span>):\n            val <span class=\"pl-k\">=</span> func(key)\n            <span class=\"pl-v\">self</span>[key] <span class=\"pl-k\">=</span> val\n            <span class=\"pl-k\">return</span> val\n    fget <span class=\"pl-k\">=</span> Cache().<span class=\"pl-c1\">__getitem__</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">property</span>(fget, <span class=\"pl-v\">doc</span><span class=\"pl-k\">=</span>func.<span class=\"pl-c1\">__doc__</span>)\n\n<span class=\"pl-k\">class</span> <span class=\"pl-en\">Sprinter</span>(<span class=\"pl-e\">Person</span>):\n    <span class=\"pl-c1\">__slots__</span> <span class=\"pl-k\">=</span> ()\n    <span class=\"pl-en\">@lightning_speed_cache</span>\n    <span class=\"pl-k\">def</span> <span class=\"pl-en\">full_name</span>(<span class=\"pl-smi\">self</span>):\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span> <span class=\"pl-pds\">'</span></span>.join([<span class=\"pl-v\">self</span>.first_name, <span class=\"pl-v\">self</span>.last_name])\nt <span class=\"pl-k\">=</span> Sprinter(<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve<span class=\"pl-pds\">'</span></span>,<span class=\"pl-s\"><span class=\"pl-pds\">'</span>Zelaznik<span class=\"pl-pds\">'</span></span>)\n\nt.full_name\nOut[<span class=\"pl-c1\">131</span>]: <span class=\"pl-s\"><span class=\"pl-pds\">'</span>Steve Zelaznik<span class=\"pl-pds\">'</span></span>\n\ntimeit t.full_name\n<span class=\"pl-c1\">10000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">150</span> ns per loop\n<span class=\"pl-c1\">10000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">152</span> ns per loop\n<span class=\"pl-c1\">10000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">150</span> ns per loop\n<span class=\"pl-c1\">10000000</span> loops, best of <span class=\"pl-c1\">3</span>: <span class=\"pl-c1\">150</span> ns per loop</pre></div>\n</article></p>", link: "http://zelaznik.tumblr.com/post/134451531856", pub_date: "2015-12-03 07:41:54"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/127363838341", title: "App Academy (almost over)", summary: "<p>It&rsquo;s been one hell of a ride, guys, and\nnow it&rsquo;s almost over.<br/><br/>We&rsquo;ve finished the coding portion of App\nAcademy.  On Monday we switch gears and the job-search curriculum\nbegins.  At the very same time, a new cohort will be moving in,\nfollowing in our footsteps.  App Academy just cranks out coders like\na juggernaut.  The instructors still haven&rsquo;t gotten back to me on\nwhether it&rsquo;s okay to haze the new crop of students.</p><p>I&rsquo;m thinking it would be fun to pose as\nan instructor, call some students up, and tell them there is one\nfinal assessment to take this weekend before they&rsquo;re accepted.  Who&rsquo;s\nin?  (Actually my classmate <a class=\"tumblelog\" href=\"http://tmblr.co/m80QFdaFXJIK7S9M3K9iSDg\">itisthefaye</a> came up with that idea.  Send\nthe angry letters her way.)<br/><br/>I haven&rsquo;t been writing much over\nthe last week, and for good reason.  Putting together the capstone\nproject has been humbling and exhausting.  So many moving parts to\nput together.  It&rsquo;s also a mental shift from the previous portion of\nthe class, which was geared toward test taking on all the pieces\nindividually.<br/><br/>In truth, I didn&rsquo;t have a firm enough grasp of\nthe Javascript frameworks going in.  Everything up through Rails was\neasy.  Jquery, AJAX, and backbone took some getting used to.  During\nthe first week I got a lot of help from the instructors, but it went\nin one ear and out the other.  They would say something to me, but it\nwas just words.  Like a parrot I would repeat back to them verbatim\nwhat they had just said, trying to make sense of it as I stared\nblankly.  Eventually things started to click, but I had a lot of\nground to make up.<br/><br/>I&rsquo;m not happy with the way the website\nlooks, but it was done in a way that was scalable.  The styling\nleaves a lot to be desired.  Frankly I&rsquo;m in need of a vacation now.  \nThe capstone is up on the internet.  I&rsquo;m still going to be playing\nwith the styling over the next few days, but <a href=\"http://www.cosmo-connect.com/\">www.cosmo-connect.com</a>\nis my body of work.  Be kind.<br/><br/>Apparently a lot of people\nhaven&rsquo;t been happy with how things have turned out.  Such is the case\nwhen you put a bunch of overachievers and me in a room.  A rising\nstar instructor, Hasseb, gave us a Tony Robbins style pep talk. \n“Repeat after me. &lsquo;I AM A SOFTWARE DEVELOPER.'”  We shouted that\nphrase back a couple of times until our spirits were lifted.<br/><br/>Now the hard part is internalizing it as we pound the pavement looking for jobs.</p>", link: "http://zelaznik.tumblr.com/post/127363838341", pub_date: "2015-08-23 03:34:37"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/126637727961", title: "App Academy - w8d4 (Just read my Github)", summary: "<p>I don’t have time to do any writing today.  Working on getting my rails API taken care of and putting together everything in Backbone.  A lot of work.  I don’t know when I’m even going to get time to do formatting.  I hope the person who hires me is blind.  I did remember to put in all the “ALT” tags in the image information, so I got that going for me.  Enough rambling.  Here’s my Github history.  This is what I did today:<br/></p><figure class=\"tmblr-full\" data-orig-height=\"1266\" data-orig-width=\"920\"><img src=\"http://41.media.tumblr.com/4523ea63c83a0e83b8b4b1cc9586c66c/tumblr_inline_nt1xg3keLv1tx7ogr_540.jpg\" data-orig-height=\"1266\" data-orig-width=\"920\"/></figure>", link: "http://zelaznik.tumblr.com/post/126637727961", pub_date: "2015-08-14 02:55:23"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/126555169961", title: "App Academy - w8d3 (navigation bars and Github)", summary: "<p>A picture is worth a thousand words. \nSo hopefully this will satisfy my two paragraph minimum.  One of these is the real site.  The other one is the clone.  See if you can tell the two apart.<br/></p><figure data-orig-width=\"976\" data-orig-height=\"360\" class=\"tmblr-full\"><img src=\"http://40.media.tumblr.com/646223ae2e9f1bd171a6da9a2e573425/tumblr_inline_nt00lbN4uT1tx7ogr_540.png\" alt=\"image\" data-orig-width=\"976\" data-orig-height=\"360\"/></figure><p>I was going to write a post\ntoday about how much I hate writing.  It may not be obvious from my\nword counts, but I do.  I hate writing.  There.  I said it.  While I\ndon&rsquo;t like writing, I love to have written.  It&rsquo;s a subtle but\nimportant distinction.  The final product is satisfying enough to\nendure the pain of editing.  As an added bonus nobody will never see\nmy rough drafts, except for God and possibly the\nNSA.<br/><br/>The same can&rsquo;t be said for writing code because it&rsquo;s all\nup on Github.  Github is the nerds&rsquo; equivalent of comparing clothing.\n Every commit, every refactoring, every snarky comment I wrote in the\ncode, all of it is exposed to the world.  Imagine\nif you bought a novel and were able to see all the author&rsquo;s rough\ndrafts.  Sometimes it&rsquo;s better not knowing how the sausage is\nmade.<br/><br/>Maybe I worry too much.  I figure if a potential\nemployer is combing through all my previous commits, that means I\nhave their full, undivided attention and I&rsquo;m a shoo in.<br/><br/>On second thought maybe I don’t hate writing as much as I previously said.  This writing break was therapeutic.  Back to finishing that pesky navigation bar so my project stays on schedule.</p>", link: "http://zelaznik.tumblr.com/post/126555169961", pub_date: "2015-08-13 02:25:49"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/126464331551", title: "App Academy - w8d2 (database monotony)", summary: "<p>I guess the problem with a back-end\nheavy site is that you don’t have the same instant\ngratification.<br/><br/>Some of my classmates have cloned websites with\nno more than 4 tables.  My OkCupid clone has 17.  For those of you\nwho were asleep in geometry, the number of associations between these\ntables can sometimes be O(n^2).  I spent Tuesday morning churning out\ndatabase migrations, indexes, and foreign_keys.  The mid morning and\nafternoon was spent writing active record associations.<br/><br/>Using\ncolored markers to draw lines between tables so I don’t lose track of\nmy progress.  Sometimes it feels like the monkey on the typewriter. \nI’m taking it on faith that eventually this monkey will start typing\nsome Shakespeare.</p><p>Truth be told, I probably could have\ntaken a lot of shortcuts building the database, and nobody would have\nbeen the wiser.  The problem is I’d have a hard time looking at\nmyself in the mirror.  “You’ve become the person you hate,” I’d\nmutter to myself as I splashed cold water on my face.<br/><br/>I gave\nmyself only one day to do the back-end work.  Knowing me, I could go\ndown a rabbit hole if I’m not careful.  A lot of Rails work would be\nmore efficient, scalable, and reliable if it were written as a set of\nstored procedures in Postgres, but that could easily take up the\nwhole two weeks if I didn’t stop myself.<br/><br/>So.  All the thankless\nwork that I happen to love is out of the way.  Time to move on to the\nshiny front-end bells and whistles.  I’ll post a link to the beta\nversion here on this blog.  Please try to break it and let me know\nwhat bugs or other general unpleasantries you find.</p>", link: "http://zelaznik.tumblr.com/post/126464331551", pub_date: "2015-08-12 00:09:11"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/126404306126", title: "App Academy - w8d1 (RIP Assesments)", summary: "<p>In case you were curious, here&rsquo;s the\nscore: Steve-1, Senioritis-0.<br/><br/>We turned in our last assessment\ntoday, and I failed 1 spec out of 27.  Whatever the passing mark is,\nI&rsquo;m pretty sure it&rsquo;s not a perfect score, so I&rsquo;m golden.  Also\napparently my bit this weekend on senioritis struck a chord with some\nof my classmates.  I had no idea any of you read my blog.  (I also I\ncan&rsquo;t imagine why the top brass at App Academy decided not to retweet\nit.)<br/><br/>Now it&rsquo;s full speed ahead on our final projects, and in\nmy case, the OkCupid clone.  Here&rsquo;s my spinoff theme: Cosmo-Connect,\nThe Dating Site About Nothing.  It&rsquo;s OkCupid, but founded by\nSeinfeld&rsquo;s Cosmo Kramer. A good chunk of the profiles are characters\nfrom Seinfeld.<br/><br/>This touches on a bigger theme for our final\nprojects: humor.  Humor is essential to life.  If you can make them\nlaugh, you can make them love you.  You have to take risks with\nhumor, or else be dull.  But humor is a fine line, and you don&rsquo;t know\nwhere the line is until you&rsquo;ve crossed it.  I&rsquo;m banking on Seinfeld\nhaving enough mainstream acceptance.  The Goldilocks “just-right”\nblend of humor without offending.<br/><br/>We&rsquo;ll see how it goes.  Oh yeah, I guess I also have to build a website too.  I almost forgot.<br/></p>", link: "http://zelaznik.tumblr.com/post/126404306126", pub_date: "2015-08-11 05:55:51"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/126211793316", title: "App Academy - w7d6 (senioritis)", summary: "<p>How many years out of high school do\nyou have to be before it&rsquo;s no longer palatable to use the word\n“senioritis”?</p><p>It&rsquo;s probably fewer than the number of\nyears that have passed since my own graduation, but I&rsquo;m using the\nword anyway.  According to google: “Senioritis: a supposed\naffliction of students in their final year of high school,\ncharacterized by a decline in motivation or performance.”</p><p>We&rsquo;re allowed to fail up to one\nassessment.  I&rsquo;ve taken five assessments so far and passed every one.\n There&rsquo;s only one left.  I think you see the problem.  If this were\nmy final project it might be different.  That&rsquo;s the project that I&rsquo;ll\nbe showcasing to potential employers.  But my assessment?  It&rsquo;s not\nlike I&rsquo;m not going to post my assessment results on GitHub.  In fact\nI&rsquo;m pretty sure doing so would get me kicked out for\ncheating.<br/><br/>There&rsquo;s another factor that I&rsquo;m using to rationalize\nmy senioritis.  Our cohort is going to be the last to learn\nbackbone.js.  Apparently backbone is old news now and people have\nmoved on to newer, shinier frameworks, mainly “React”.  Such is\nlife in the ever-changing world of front-end development.  Say what\nyou want about back-end tools such as SQL.  They are unglamorous\nworkhorses, but they&rsquo;re tried and true.  I suspect SQL will still be\naround after “React” itself is overtaken by a new kid on the\nblock.<br/><br/>Earlier this week I mentioned my top three choices for\nthat capstone project.  The results are in and I got my first choice.\n I&rsquo;ll be doing a clone of OkCupid.  We can&rsquo;t call it an “OkCupid\nclone”, so we have to create our own niche dating site theme.  Past\nthemes have included a dating site for professional boxers and a\ndating profiles for pets.  My roommate Eric came up with the best\nidea, and I&rsquo;m going with it.<br/><br/>What is this idea?  I guess\nyou&rsquo;ll have to find out by reading Monday&rsquo;s post.</p>", link: "http://zelaznik.tumblr.com/post/126211793316", pub_date: "2015-08-09 00:09:08"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/126094315456", title: "App Academy - w7d5 (Front vs. Back End)", summary: "<p>I&rsquo;m sad to say I missed another class\nin Hasseb&rsquo;s algorithms series, but I had a doctor&rsquo;s note.<br/><br/>Yesterday\nwas the GOP “happy hour debate.”  It was the circus we were all\nwaiting for, and they didn&rsquo;t disappoint.  A friend of mine posted a\nstory on my facebook wall warning me not to play drinking games\nduring the debate because I might die of alcohol poisoning.  I&rsquo;m\nwriting this post on a Friday morning at 7:00 a.m. so I&rsquo;m still here,\nbut if you write a comment, please do it quietly, and definitely not\nin all caps.<br/><br/>Back on topic, I&rsquo;m sensing a split in the App\nAcademy crowd as we delve deeper into front-end frameworks. \nEverybody in App Academy is smart, but there are two groups of\npeople, those who love math and those that don&rsquo;t.  For those of us\nwho majored in math, philosophy, and other logical pursuits, the back\nend work is simply more interesting than front-end.  What&rsquo;s the most\nefficient way to store data?  Which structures are O(n), O(n*log(n)),\nO(1), etc?  For me, the algorithms and back-end work are like\npuzzles.  I&rsquo;d do nothing but solve those problems all day if somebody\nwould only pay me for it.<br/><br/>Front-end work, by comparison is a\nlot of random trivia.  You have to understand event driven\nprogramming and asynchronous commands, but after that, it&rsquo;s simply\nbecoming familiar with the popular framework of the day.  For that\nreason, front end work is more of a stretch for me.  I don&rsquo;t think\nI&rsquo;m alone.  I&rsquo;ve noticed that the more math my coding partner has for\nthe day has studied, the less excited they are about front end work. \nThe opposite is true too.  People who struggled through the first\npart of the corse are breezing through the front end portion.</p>", link: "http://zelaznik.tumblr.com/post/126094315456", pub_date: "2015-08-07 13:47:12"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/126017244406", title: "App Academy - w7d4 (I got nothing)", summary: "<p>Part of writing a blog every day is\nthat there&rsquo;s pressure to have some grand insight.  Insights and\nemotions are the two things that make a good story.<br/><br/>Unfortunately,\nI don&rsquo;t always have something interesting to say.  So you&rsquo;ll just\nhave to bear with me.  I don&rsquo;t want to say anything this morning, but\nI have a daily deadline.  Kind of like my days back in journalism\nduring a slow news day.  I wanted to say “Sorry for this newscast. \nMaybe we should just play some more headlines from NPR.”<br/><br/>Okay,\nenough stalling.  Here are some random thoughts organized in no\nparticular fashion.<br/><br/>Today is the big day.  It&rsquo;s the day we\nsubmit our final projects to the instructors, and they pick one of\nthe top three choices.  Drumroll please&hellip;  It&rsquo;s either going to be\nOkCupid, Soundcloud, or Mint.  Not sure which one I&rsquo;ll get.<br/><br/>I\nlook forward to being reintroduced into regular society on the other\nend of this boot camp, although I do have the “unemployed jitters”\nat the moment.  I think I touched on that yesterday.<br/><br/>Had to\nget up into some people&rsquo;s faces last night.  One of my housemates\nkept making noise at 3:00 this morning.  He kept belting out “Oh,\nfuck!  Oh, fuck!”  He quieted down after the confrontation.  So\nfrom time to time this hacker house reminds me of a fraternity.<br/><br/>What\nelse?<br/><br/>I&rsquo;ve been told I type like Ned, the cofounder of App\nAcademy.  Apparently he also likes to bang away at the keyboard like\nhe&rsquo;s angry at it.  I prefer to think of it as “typing with a \npurpose.”</p><p>That&rsquo;s all I got for now.  I&rsquo;ll keep\nyou updated when I have interesting stories to tell, or whenever my\nnext deadline approaches, whichever comes first.</p>", link: "http://zelaznik.tumblr.com/post/126017244406", pub_date: "2015-08-06 15:33:23"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/125934306121", title: "App Academy - w7d3 (Wall of Minor Setbacks)", summary: "<p>Have you ever heard the proverbial\nstory about the pretty girl from a small town in Minnesota who moves\nto LA trying to make it in Hollywood, only to find that attractive\npeople are a dime a dozen?<br/><br/>The same could be said for a lot of\nus smart kids who decided to venture into Silicon Valley.  There&rsquo;s\nnothing like a coding bootcamp to make you feel average.  It was a\nfear of mine when I left my previous field.  I was an awesome\nprogrammer in that environment, but over here the competition is much\nfiercer.<br/><br/>The speed in which everybody else is picking up the\nmaterial is formidable.  I have to tip my hat to my partner Raymond\nyesterday.  He was a patient explainer for everything related to\nbackbone.js.  I wouldn&rsquo;t have completed the assignment without\nhim.<br/><br/>I&rsquo;ve written in the past about my worries going into\nassessments.  I don&rsquo;t worry about those anymore.  I&rsquo;m a good test\ntaker and I know I&rsquo;ll pass the last one.  It&rsquo;s the job search that\nterrifies me.  We have two weeks to put together a final project. \nAfter that it&rsquo;s straight into the deep end of the pool.<br/><br/>In\norder to keep us on our toes, App Academy has a board called the\n“Wall of Minor Setbacks”.  Every time you apply for a job and\ndon&rsquo;t get accepted you get an additional tally by your name.  The\nidea is to make sure you keep applying.  It keeps us on our toes.<br/><br/>I\ncan only imagine the mayhem that would ensue if a “Wall of Minor\nSetbacks” was ever installed at a bar on a weekend.</p>", link: "http://zelaznik.tumblr.com/post/125934306121", pub_date: "2015-08-05 15:44:26"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/125849734731", title: "App Academy - w7d2 (A journey into anti-patterns)", summary: "<p>During these coding bootcamps the most\ncolorful stories usually involve the living situations of my\nclassmates and me.  Unless the person is sitting on a trust fund most\nof us have found some bare bones spartan quarters.<br/><br/>For me, I\nfound a place I refer to as a hacker house.  Lots of smart\nhousemates, even a couple App Academy alums.  Even a few alums from\nour evil competitor, Hack Reactor.  It&rsquo;s a great group to live with\nand learn from.  But today one of my housemates gave me a taste of my\nformer life in the wasteland that is\nbanking/insurance/finance.<br/><br/>We&rsquo;ll call my housemate “Jane”,\nand we&rsquo;ll call the company she works for “Old Financial.”  All\nthe names in this story have been changed.<br/><br/>Apparently word has\nspread quickly about my experience with SQL, so Jane came knocking on\nmy door, asking for help debugging a SQL query she inherited at work.\n What I saw wasn&rsquo;t a SQL query.  It was a monstrosity, and it was par\nfor the course back in finance.<br/><br/>A good SQL query might take\ntwenty lines to run.   This was a 970 line beheamouth, with levels of\ntriply nested queries unioned with other triple nested queries.  Lots\nof hard coded switch statements.  “If tableA.customerID IN (31415,\n271818, 86753, 5256) THEN DO X”<br/></p><p>If this doesn&rsquo;t worry you, it should.  Finance professor James Kwak wrote about the dangers of bad software in finance a few years back.  I’ve shared this post offline, but here it is again.<br/><br/><a href=\"http://baselinescenario.com/2013/02/09/the-importance-of-excel/\">http://baselinescenario.com/2013/02/09/the-importance-of-excel/</a></p><p>The same bankers and Wall Street\nfolks who say that they don&rsquo;t need regulation are the people who are\nultimately responsible for messes such as this.  Is there any\ndocumentation of these hard coded values?  Have any unit-tests been\nrun to make sure you&rsquo;re getting the right result?<br/><br/>How do we\nknow the old result is correct?  We know because the old answer has\nbeen officially recorded in the last financial statement, therefore\nit is true.  Don&rsquo;t think about that circular line of reasoning for\ntoo long.  You&rsquo;ll run out of stack space in your brain.<br/><br/>One of\nthe benefits of App Academy is learning the words for concepts that\nI&rsquo;ve known at a visceral level for years.  The first is\n“anti-pattern”.  An anti-pattern is a coding pattern that flies\nin the face of common sense and decency.  There are entire books\ndedicated to anti-patterns.  I don&rsquo;t know why I love that word so\nmuch.  (Yes, I can be guilty of anti-patterns too.  I do my best to\ncorrect them.)<br/><br/>The other term is the one I wish I had known\nback in my old job.  “Technical debt.”  Technical debt is\nincurred when people want to get a project up and running very\nquickly.  Like credit card debt, it seems like a good idea at the\ntime, but only if you&rsquo;re not worried about tomorrow.  That spaghetti\ncode SQL query my poor roommate was stuck debugging is an example of\ntechnical debt.  It starts off with a small query.  Then the query\ngets a little larger.  Every workaround seems logical at the time,\njust like every extra credit card purchase can be rationalized\naway.<br/><br/>Fast forward five years.  Now the balance on the\ntechnical credit card has piled up.  Once that happens, so many\nbright workers have no hope of paying off the principal on the debt. \nAll they can hope to do is keep up with the interest payments.  Code\nnow takes ten times longer to debug, and that&rsquo;s if you&rsquo;re lucky. \nEventually the interest payments get too great, and that&rsquo;s when you\nreach technical bankruptcy.<br/></p>", link: "http://zelaznik.tumblr.com/post/125849734731", pub_date: "2015-08-04 15:44:44"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/125764469506", title: "App Academy - w6d5", summary: "<p>Because App Academy has an odd number\nof students, every once in a while somebody joins the short straw and\nhas to work solo.<br/><br/>I don&rsquo;t normally air dirty laundry, but\nwe&rsquo;re required to post a daily blog, and I&rsquo;m not going to airbrush\nover App Academy&rsquo;s shortcomings.<br/><br/>Being asked to work solo when\nfifty other people are working in pairs is a waste of my time.  It&rsquo;s\nfar less productive than if I had just taught myself the material for\nfree at home.  Imagine trying to study while you&rsquo;re at a bar with\nthat one table to the left of you who keeps breaking out in laughter\nevery two minutes.<br/><br/>There was a quieter room on the campus, but\nI was told I was not not allowed to go to that room to study.  I had\nto stay in the common areas.  Even with earplugs I&rsquo;m spending all my\nenergy trying to tune out the noise from everybody else.<br/><br/>It would make sense if\nthere were one group of three rather than one odd man out. \nEspecially if we&rsquo;re trying to master material we just learned earlier\nthat morning.  If you&rsquo;re the odd man out and you get stuck on a\ntopic, which happens frequently, rather than discus with your partner, you&rsquo;re going to wait 20 minutes to\nfind an available instructor.<br/><br/>App Academy can do better than\nthis.</p>", link: "http://zelaznik.tumblr.com/post/125764469506", pub_date: "2015-08-03 15:46:05"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/125517614306", title: "App Academy - w6d4", summary: "<p>Can’t talk right now.  I’m studying for my assessment, and let’s be clear, I don’t have anything interesting to say either.  Is this two paragraphs yet?  That’s my minimum.  How about we round it up to the nearest two paragraphs?  No?  I’ve written much longer posts in the past, so my average still makes the cut?  All right, I’m out of excuses for this blog post.<br/></p>", link: "http://zelaznik.tumblr.com/post/125517614306", pub_date: "2015-07-31 14:45:23"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/125403256641", title: "App Academy - w6d3", summary: "<p>Thanks to Javascript I&rsquo;ve just proven that I am God.<br/><br/>Hear me out.<br/><br/>2/0 == Infinity.  1/0 == Infinity.  Because Infinity equals itself in Javascript, this means 2/0 == 1/0.  Multiply both sides by 0, and you get 2 == 1.  Imagine there&rsquo;s a set of 2 elements: {me, God}.  Because 2 == 1, the set of two items only has one item.  I&rsquo;m a member of a one item set that includes God, therefore I am god.<br/><br/>QED<br/><br/>(In case you were wondering why you can’t divide by zero, this is why.  If you could divide by zero, it would mean that every real number is equal to every other.)<br/><br/>Picking on the quirks of Javascript is too easy.  We should never use it for serious mathematical operations.  Instead it’s useful for quick building of powerful web apps.  We’ve been going back and redoing our original <br/><br/>Over the last few days we’ve been going back and redoing our original Ruby games but putting them into much nicer graphical interfaces thanks to CSS and Javascript.  I don’t have much more to say on the topic other than the fact that I’m a little bit better today than I was yesterday.  I still need to put in some more time and get this working like muscle memory.  Practice makes perfect.<br/></p>", link: "http://zelaznik.tumblr.com/post/125403256641", pub_date: "2015-07-30 04:30:03"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/125348846721", title: "App Academy - w6d2", summary: "<p>If you remember the old days of Windows\nmachines, there was always some poorly implemented status bar that\nwould say “0 percent complete” until the very end when it jumped\ninstantaneously to 100.  In truth the computer is feverishly slaving\naway for you behind the scenes, but it has little to show for it\nuntil the end.<br/><br/>At App-Academy, this has been the week where\nthe status bar goes from 0 to 100.<br/><br/>The first few weeks were\nall about object-oriented programming and the Rails framework. \nThat&rsquo;s all well and good.  It&rsquo;s absolutely necessary.  That said,\nit&rsquo;s disappointing to build a robust back end and only see plain text\nin your browser.  It feels so remedial.  The whole time I kept\nthinking “I&rsquo;m a grown man.  Is this the best I can do?”<br/><br/>Enter\nJavascript and CSS.<br/></p><p>The last week and a half has been a\nsink-or-swim plunge into both frameworks.  I&rsquo;m staying later at the\ncampus and getting up earlier.  There&rsquo;s a lot to learn, but it&rsquo;s\nworth it.  Javascript is how web pages can be interactive beyond\nsimple web forms.  If you play minesweeper online, it&rsquo;s probably a\nwritten in Javascript.  Remember minesweeper anybody?<br/><br/>CSS is\nhow web pages are styled.  It&rsquo;s what websites need to make the pages\nlook pretty.  It sets the fonts, the layout, the dropdown menus,\nbasically everything that makes the website feel like an app rather\nthan a torn out newspaper article.</p><p>Getting CSS and Javascript\nright is instant gratification.  Nobody is wowed by a database. \nNobody is wowed by a scalable object design pattern.  CSS and\nJavascript are the two tools where we can start to build things that\nmake laypeople impressed.<br/><br/>But, it&rsquo;s a lot to learn.<br/><br/>If\nI can make a science analogy, object-oriented programming and\nback-end work is like physics.  CSS is like biology.  Physics relies\non a small set of rules, From those rules most of the\nother formulas can be derived.  Biology on the other hand requires a\nlot of brute force memorization.  No way around it.  CSS is a bunch of brute force tricks to memorize. \nThere doesn&rsquo;t seem to be a grand unifying theory.  That said, it will\nmake a lot more sense once I get some muscle memory.</p><p>This has been a long post, so I&rsquo;m going\nto leave you with this example of how important style sheets and CSS\nare.  This is a post that went viral in 2012 that I still chuckle at.\n A kid comes out of the closet.  His friends on facebook are fine\nwith it.  What they&rsquo;re not okay with is that he wrote his coming out\npost on plain\nHTML.<br/><br/><a href=\"http://www.someecards.com/news/so-that-happened/guy-comes-out-of-closet-on-facebook-to-friends-entirely-too-geeky-to-care/\">http://www.someecards.com/news/so-that-happened/guy-comes-out-of-closet-on-facebook-to-friends-entirely-too-geeky-to-care/</a></p><p>It&rsquo;s been three years and for some\nreason that post never gets old.</p>", link: "http://zelaznik.tumblr.com/post/125348846721", pub_date: "2015-07-29 15:21:51"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/125176693456", title: "App Academy - w5d5", summary: "<p>Am I starring in Groundhog&rsquo;s day?<br/><br/>I&rsquo;m\nnow doing the same things in Javascript that I did in Ruby.  App\nAcademy doesn&rsquo;t let you rest on your laurels.  Right as I was getting\nthe hang of the model view controller pattern, we&rsquo;re on to something\nelse.<br/><br/>Javascript is a language that has been repurposed far\nbeyond its original intents.  This means that the wheel has to be\nconstantly reinvented.  Writing your own array functions for\ninstance: sorting, filtering, reducing, etc.  Some of my classmates\nare visibly frustrated about having to do this now that we&rsquo;re not\nusing a mature language such as Ruby.<br/><br/>As for me&hellip; this\nenvironment is intimately familiar.<br/><br/>This is a skill set I wish\nI wasn&rsquo;t so good at, but my classmates&rsquo; frustrations with Javascript\nare similar to my experience with Microsoft VBA.  The language has no\nfeatures, and so you have to redo all the basics.  I can&rsquo;t count the\nnumber of times I had to write my own sorting functions in VBA.  It&rsquo;s\nalmost muscle memory.</p><p>Another similarity I have noticed: It\nfeels like the object-oriented functionality was bolted on after the\nfact.  It&rsquo;s awkward and unpleasing to use.<br/><br/>Sigh.<br/><br/>Still,\ncomparing Javascript to VBA is an insult to Javascript.  Javascript\nis way more powerful.  Having closures, the ability to pass functions\nto other functions, those features are invaluable.</p>", link: "http://zelaznik.tumblr.com/post/125176693456", pub_date: "2015-07-27 15:52:18"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/124926345886", title: "App Academy - w5d4", summary: "<p>Today was our first foray into the the\nlanguage that&rsquo;s the definition of mission creep: Javascript.  We&rsquo;re\nspending as much time learning the language as it took for the\nlanguage itself to be written.  During the lecture this morning, the\ninstructor played us an amusing video showing many of Javascript&rsquo;s\nquirks.<br/><br/><a href=\"https://www.youtube.com/watch?v=FqhZZNUyVFM\">https://www.youtube.com/watch?v=FqhZZNUyVFM</a></p><p>Lots of weird behaviors.  My classmates\nwere taken aback that a == b could return true while b == a returns\nfalse.  Actually you see exactly the same pattern in Ruby all the\ntime.  Here&rsquo;s my case example:<br/><br/> [in] &gt;&gt;&gt; digest =\nBcrypt::Password.create(“password123”);<br/>[in] &gt;&gt;&gt; digest ==\n“password123”<br/>[out] &gt;&gt;&gt; true<br/>[in] &gt;&gt;&gt; “password123” ==\ndigest<br/>[out] &gt;&gt;&gt; false<br/><br/>Wait, what?  The equals operator\nis not commtative in Ruby or Javascript?  So what&rsquo;s going on here? \nWhen digest == “password123” is called, what happens is it calls\ndigest.__eq__(“password123”).  Actually this is the Python\nnotation, but for educational purposes, I&rsquo;m using that notation.  The\nexpression digest.__eq__(“password123”) yeilds true, but\n“password123” is a built in string, and doesn&rsquo;t know how to\ncompare itself to a hashed password, so\n(“password123”).__eq__(digest) yields false.<br/><br/>This is a\nproblem.  Now I see why there was never a numeric library written in\nRuby.  The expression a + b must yield the same result as b + a. \nSame with the == operator.  Occasionally I get into discussions about\nwhether I like Python or Ruby better.  Rails is awesome, but Python\nis a superior language to Ruby.  Now let&rsquo;s look at the same operation\nin Python.  (“password123”) is a string and doesn&rsquo;t know how to\ncompare itself to a BCrypt hashed password, so\n(“password123”).__eq__(digest) returns a special value\n“NotImplemented”.  That tells the interpreter to try the reverse\noperation (digest).__eq__(“password123”) at which point we get\ntrue.  This means that in Python a == b will be the same as b == a. \nIt may not seem like much, but without this sort of advanced\nplanning, numeric extension libraries would be next to impossible to\nimplement in Ruby.<br/><br/>At this point I&rsquo;m supposed to have some\ngrand conclusion, but look at word count.  I&rsquo;m out of column inches.</p>", link: "http://zelaznik.tumblr.com/post/124926345886", pub_date: "2015-07-24 15:47:51"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/124841398826", title: "App Academy - w5d3", summary: "<p>In hindsight, this last week is what\nwriter Seth Godin refers to as “The Dip”.  It&rsquo;s the point where\nyou decide whether to move forward or quit.  I got through it.  I&rsquo;m\nready for the next challenge.  So I&rsquo;m still here, even if this blog\nmight seem to catalogue my slow descent into madness.</p><p>This past week was exhausting, but it&rsquo;s\na world of difference between, “God damn this is hard,” and “God\ndamn this is pointless.”  This is the former.  I never have to\nremind myself that I choose to do this, frankly because it&rsquo;s not even\na close call whether I&rsquo;d rather be doing this or my old job.<br/><br/>The\ntwo most impactful solo projects have been ActiveRecordLite and\nRailsLite.  These are cheap knockoffs the two most important\ncomponents in Rails.  The first, ActiveRecord maps Ruby objects to a\nSQL database.  RailsLite handles all the requests a normal user sends\nto the site through a browser.<br/><br/>I&rsquo;m not sure what my classmates\nthink of these projects.  For me, it&rsquo;s important to know the\nfundamentals.  If you don&rsquo;t, you&rsquo;re likely to choose a poorly\noptimized solution.<br/><br/>But now Rails is over.  We&rsquo;re onto\nJavaScript.  I went through Code Adacemy&rsquo;s guide to JavaScript\nyesterday.  Once you learn the syntax for one language, learning\nanother is pretty easy.  Learning JavaScript in one day might seem\nfast, but it&rsquo;s only nine days fewer than it took to write the entire\nlanguage.<br/></p>", link: "http://zelaznik.tumblr.com/post/124841398826", pub_date: "2015-07-23 15:40:46"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/124675810981", title: "App Academy - w5d2a (I passed)", summary: "<p>Whew!  Thats a load off.<br/><br/>There are still 25 minutes left in the assessment, but I’ve turned mine in.  All of the unit tests pass, so at this point not falling asleep is a victory in my book.  I don’t give a rat’s ass about refactoring today.  Yes, I used all sorts of anti-patterns in the code.  Copy and paste - this, spaghetti - that.  Any comments that my TA makes on my assessment will be more than justified.<br/><br/>I guess my sleep deprivation gamble paid off.  Although today we’re working solo.  I don’t expect to accomplish much today, but I’ll still give it the good old college try.<br/></p>", link: "http://zelaznik.tumblr.com/post/124675810981", pub_date: "2015-07-21 17:39:21"},
  {user_id: 1, guid: "http://zelaznik.tumblr.com/post/124652043611", title: "App Academy - w5d1", summary: "<p>There may be hope for me just yet.  No\npromises, though.</p><p>Yes, you read the timestamp correctly\non my blog.  I&rsquo;m writing this at 3:00 a.m. San Francisco time.  I\nstayed up late and kept doing the practice assessment until I could\ndo it in under the time limit of 2 hours.  I started at 1:00 a.m. and finished at\n2:35.<br/><br/>Spare the lectures.  Yes, sleep deprivation is a\nhorrible strategy.  It&rsquo;s horrible if you&rsquo;re prepared the day before. \nI wasn&rsquo;t ready on Monday.  If I had gotten a good night&rsquo;s sleep I\nwould have woken up refreshed on Tuesday and still failed.  Now I at\nleast have a fighting chance.</p><p>Whichever way the assessment goes on\nTuesday, I&rsquo;ll have learned my lesson.  Start the practice assessment\nmuch earlier.  Don&rsquo;t leave anything to chance.  That&rsquo;s lesson #1. \nLesson #2 is to go over the pair programming results on a daily\nbasis.  Commit that to muscle memory as well.<br/><br/>Finally, I have\nto tip my hat to my partner Jacey today.  He was patient and a\npleasure to work with.  If it hadn&rsquo;t been for that, I may not have\nfinally gotten the hang of this assessment.<br/><br/>I&rsquo;m not breaking\nout the champagne just yet, but I&rsquo;m hopeful.</p>", link: "http://zelaznik.tumblr.com/post/124652043611", pub_date: "2015-07-21 09:49:17"}
])
Splash.create!([
  {user_id: 1, rank: 0, p: "Full-stack developer with a passion for", h2: "Ruby On Rails"},
  {user_id: 1, rank: 1, p: "Five years writing financial software in", h2: "Python / PostgreSQL"},
  {user_id: 1, rank: 2, p: "Public radio junkie, swing dancer, the hobbies go on", h2: "Learn More"}
])
User.create!([
  {first_name: "Steve", last_name: "Zelaznik", email: "steve.zelaznik@gmail.com", address: "219 6th St #2A\nSan Francisco, CA 94103", phone: "(410) 375-8414", resume: nil, twitter: "stevezelaznik", blog: "http://zelaznik.tumblr.com", github: "http://www.github.com/zelaznik", linkedin: "http://www.linkedin.com/in/zelaznik"}
])
